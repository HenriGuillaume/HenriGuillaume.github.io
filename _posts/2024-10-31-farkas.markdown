---
layout: post
title: "Farkas' lemma"
date: 2024-10-31
---

<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>

<!-- CSS for the animations and sliders -->
<style>
    /* Make sliders fit the width of their container */
    input[type="range"] {
        width: 100%; /* Full width */
        margin-top: 10px; /* Add some space above */
    }
    #image-container-1, #image-container-2, #image-container-3 {
        width: 100%; /* Make containers full width */
        text-align: center; /* Center the images */
    }
    img {
        max-width: 100%; /* Responsive images */
        height: auto; /* Maintain aspect ratio */
    }
</style>

<!-- CSS for the theorem boxes-->
<style>
    .theorem {
        border: 2px solid #007BFF;
        border-radius: 5px;
        background-color: #f9f9f9;
        padding: 15px;
        margin: 20px 0;
        font-family: Arial, sans-serif;
    }

    .theorem h4 {
        margin: 0;
        font-weight: bold;
    }
</style>

<!-- Content with LaTeX -->
On the surface, this post is a visual explaination of Farkas' lemma, which mind you, isn't a difficult lemma to visualise, but still has a great geometrical interpretation. However, my main goal when writing this was to experiment with [Manim](https://www.manim.community/) and creating "interactive" animations. 

Let's start by the lemma's statement:

<div class="theorem">
    <h4>Farkas' lemma</h4>
    For a matrix \(A \in \mathbb{R}^{m \times n}\) and \(b \in \mathbb{R}^{m}\) one and only one of these two things are true:

    - There exists \(x \in \mathbb{R}^{n}\) such that \(Ax = b\) and \(x \geq 0\)

    - There exists \(y \in \mathbb{R}^{m}\)such that \((A^T)y \geq 0\) and \((b^T)y < 0\)
</div>

The part of this theorem that may be unusual is the fact that we put an order on our vector space. Here when we say \(x \leq 0\) we mean that each component of \(x\) is less or equal than zero.

## The first part of the alternative

For illustration purposes, we will place ourselves in \(\mathbb{R}^2\) with a matrix 
\[
\begin{pmatrix}
1 & 3\\
2 & 1
\end{pmatrix}
\]
We will denote \(v_1\) and \(v_2\) the columns of this matrix.

With this order defined, the first statement can be rephrased by saying "\(b\) is the image of a point \(x\) in the first quadrant of the plane". Let's have a look at how \(A\) transforms the first quadrant of the plane by applying it to points with positive coordinates.

<!-- Animation 1 -->
<div id="image-container-1">
    <img id="animation-image-1" src="/assets/farkas/shear_frames/frame0001.jpg" alt="Animation Frame 1">
</div>
<input type="range" id="slider-1" min="1" max="300" value="1" step="1">

We can see that we obtain a *cone* that we will call \(S\).

<!-- Animation 2 -->
<div id="image-container-2">
    <img id="animation-image-2" src="/assets/farkas/hp_frames/frame0001.jpg" alt="Animation Frame 2">
</div>
<input type="range" id="slider-2" min="1" max="300" value="1" step="1">

<!-- Animation 3 -->
<div id="image-container-3">
    <img id="animation-image-3" src="/assets/farkas/flippedy_frames/frame0001.jpg" alt="Animation Frame 3">
</div>
<input type="range" id="slider-3" min="1" max="200" value="1" step="1">


<!-- JavaScript Code -->
<script>
    /**
     * Function to initialize the frame-by-frame animation with a slider.
     */
    function initFrameAnimation(framePath, totalFrames, imageElementId, sliderElementId) {
        const animationImage = document.getElementById(imageElementId);
        const slider = document.getElementById(sliderElementId);

        if (!animationImage || !slider) {
            console.error('Invalid element IDs provided.');
            return;
        }

        slider.min = 1;
        slider.max = totalFrames;
        slider.value = 1;
        slider.step = 1;

        function getFrameSrc(frameNumber) {
            const frameString = String(frameNumber).padStart(4, '0');
            return framePath + frameString + '.jpg';
        }

        slider.addEventListener('input', function() {
            const frameNumber = parseInt(slider.value);
            animationImage.src = getFrameSrc(frameNumber);
        });

        function preloadImages(start, end) {
            for (let i = start; i <= end; i++) {
                const img = new Image();
                img.src = getFrameSrc(i);
            }
        }

        preloadImages(1, Math.min(totalFrames, 10));
    }

    // Initialize animations
    initFrameAnimation('/assets/farkas/flippedy_frames/frame', 52, 'animation-image-3', 'slider-3');
    initFrameAnimation('/assets/farkas/hp_frames/frame', 50, 'animation-image-2', 'slider-2');
    initFrameAnimation('/assets/farkas/shear_frames/frame', 95, 'animation-image-1', 'slider-1');
</script>
